filename = "miscellaneous"
name = "Miscellaneous"
text = ""

[[apis]]
    filename = "bail"
    starts-subcategory = "Errors"
    kinds = ["fn"]
    args = ["args val *"]
    text = """
        Triggers an error.

        With a single argument, the error's payload will be that argument. Otherwise, all of
        the arguments are passed to [`str`](str), and the resulting string is the error's
        payload.
    """

[[apis]]
    filename = "ensure"
    kinds = ["mac"]
    args = ["condition form", "message form *"]
    text = """
        Triggers an error when an assertion fails.

        When `condition` evaluates to `#f` or `#n`, the `message` arguments are all passed to 
        [`bail`](bail). Otherwise, the `message` arguments aren't evaluated at all.
    """

[[apis]]
    filename = "todo"
    kinds = ["mac"]
    args = ["args val *"]
    text = """
        Triggers an error with a "not yet implemented" message.

        `(todo x)` is equivalent to `(bail "not yet implemented: " x)`.
    """

[[apis]]
    filename = "dbg"
    kinds = ["mac"]
    args = ["args val *"]
    text = """
        Prints its arguments, formatted for debugging.

        Prints each argument on its own line using [`eprn`](eprn), prefixed with its file location
        and the argument's form. For example, `(dbg (+ 1 2) (+ 3 4))` might print:

            [example.glsp:1] (+ 1 2) = 3
            [example.glsp:1] (+ 3 4) = 7
    """

[[apis]]
    filename = "try"
    kinds = ["mac"]
    args = ["body form *"]
    text = """
        Captures errors with a brief error message.

        Returns a two-element array. If an error occurs within the body of the `try` form, returns 
        the symbol `err` followed by the error's [payload](bail). Otherwise, returns the symbol
        `ok` followed by the body's evaluation result.

        The only error not captured by `try` is the special error generated by
        [`macro-no-op`](macro-no-op), which suppresses macro expansion.
    """

[[apis]]
    filename = "try-verbose"
    kinds = ["mac"]
    args = ["body form *"]
    text = """
        Captures errors with a verbose error message.

        `try-verbose` is very similar to [`try`](try), but when an error occurs, the returned
        array contains a third element: a [stack trace](stack-trace) string.

        Generating a stack trace can be very expensive (upwards of one millisecond), so 
        `try-verbose` should be used with caution.
    """

[[apis]]
    filename = "file-location"
    kinds = ["fn"]
    args = []
    returns = "str|nil"
    text = """
        Returns a string describing the current file and line number.

        For example, `(file-location)` might return the string `"example.glsp:1"`.

        Line numbers are one-indexed: the first line in the file has the index `1`.

        When the `file-location` call wasn't parsed from a file, it may not have a corresponding
        line number at all. In that case, it will return `#n`.
    """

[[apis]]
    filename = "stack-trace"
    kinds = ["fn"]
    args = []
    returns = "str"
    see-also = ["try-verbose"]
    text = """
        Returns a string describing the current call-stack.

        Generating a stack trace can be very expensive (upwards of one millisecond), so this
        function should be used with caution.
    """

[[apis]]
    filename = "eq-p"
    starts-subcategory = "Equality"
    kinds = ["fn"]
    args = ["args val 2+"]
    returns = "bool"
    text = """
        Returns `#t` if all of its arguments are equal to one another.

        Each successive pair of arguments is compared in turn. If any of the comparisons are
        false, the function returns early.

        - Numbers and characters are compared using [`==`](num-eq).

        - Arrays are equal if they have the same length, and each element is equal to the
          corresponding element in the other array.

        - Strings are equal if they have the same length and the same characters.

        - Tables are equal if they have the same set of keys (based on 
          [key-equivalence](keys-eqv-p)), and if each value is equal to the corresponding value
          in the other table.

        - Otherwise, two values are equal if they [share the same identity](same-p).

        This behaviour can be overridden for objects and `RData` by defining an `op-eq?` method.
        If `(.op-eq? a b)` returns `#f` or `#n`, then `a` and `b` are not equal.
    """

[[apis]]
    filename = "same-p"
    kinds = ["fn"]
    args = ["args val 2+"]
    returns = "bool"
    see-also = ["eq-p"]
    text = """
        Returns `#t` if all of its arguments share the same identity.

        Each successive pair of arguments is compared in turn. If any of the comparisons are
        false, the function returns early.

        - Numbers and characters are compared using [`==`](num-eq).

        - `#n` has the same identity as `#n`.

        - `#t` has the same identity as `#t`.

        - `#f` has the same identity as `#f`.

        - All other values are references. Two references share the same identity if
          they belong to the same primitive type, and refer to the same memory location.
    """

[[apis]]
    filename = "num-eq-any-p"
    name = "==any?"
    kinds = ["fn"]
    args = ["args num +"]
    returns = "bool"
    text = """
        Returns `#t` if its first argument is numerically equal to any other argument.

        The arguments are compared using [`==`](num-eq).
    """

[[apis]]
    filename = "eq-any-p"
    kinds = ["fn"]
    args = ["args val +"]
    returns = "bool"
    text = """
        Returns `#t` if its first argument is equal to any other argument.

        The arguments are compared using [`eq?`](eq-p).
    """

[[apis]]
    filename = "same-any-p"
    kinds = ["fn"]
    args = ["args val +"]
    returns = "bool"
    text = """
        Returns `#t` if its first argument has the same identity as any other argument.

        The arguments are compared using [`same?`](same-p).
    """

[[apis]]
    filename = "clone"
    starts-subcategory = "Cloning"
    kinds = ["fn"]
    args = ["arg val"]
    returns = "val"
    text = """
        Returns a shallow copy of its argument.

        If `arg` is an array, string or table, this function allocates a new, mutable collection, 
        copies over the original collection's contents, and returns the new collection.

        If `arg` is an iterator, this function allocates a new iterator, copying just enough
        data so that `(iter-next! new-iter)` does not mutate the original iterator.

        If `arg` is an object or `RData` with an `op-clone` method, this function invokes that method
        and returns the result.

        For other primitive types, the function simply returns `arg`.
    """

[[apis]]
    filename = "deep-clone"
    kinds = ["fn"]
    args = ["arg val"]
    returns = "val"
    text = """
        Returns a deep, recursive copy of its argument.

        If `arg` is an array, string or table, this function allocates a new, mutable collection;
        recursively deep-clones each element from the original collection, storing the result
        into the new collection; and then returns that new collection.

        If `arg` is an iterator, `(deep-clone arg)` is equivalent to [`(clone arg)`](clone).

        If `arg` is an object or `RData` with an `op-deep-clone` method, this function invokes that 
        method and returns the result. When that method is not present, `(deep-clone arg)` is 
        equivalent to [`(clone arg)`](clone).

        For other primitive types, the function simply returns `arg`.
    """

[[apis]]
    filename = "freeze-mut"
    starts-subcategory = "Freezing"
    kinds = ["fn"]
    args = ["args val *"]
    returns = "nil"
    text = """
        Freezes a collection so that it can no longer be mutated.

        If any of the `args` are an array, string, table or object, this function sets a flag
        on those collections which will trigger an error if the collection is ever mutated.

        For other primitive types, this function is a no-op.
    """

[[apis]]
    filename = "deep-freeze-mut"
    kinds = ["fn"]
    args = ["args val *"]
    returns = "nil"
    text = """
        Recursively freezes a tree of collections.

        If any of the `args` are an array or table, this function sets their "frozen" flag, then
        recursively calls `deep-freeze!` for each of the collection's elements.

        For other primitive types, this function is equivalent to [`freeze!`](freeze-mut).
    """

[[apis]]
    filename = "freed-p"
    kinds = ["fn"]
    args = ["rdata rdata"]
    returns = "bool"
    text = """
        Returns `#t` if an `RData` has been freed.
    """

[[apis]]
    filename = "time"
    starts-subcategory = "Time"
    kinds = ["fn"]
    args = []
    returns = "flo"
    text = """
        Generates a high-precision timestamp.

        The timestamp is measured in seconds elapsed since some arbitrary starting point.
        It's measured using a high-precision performance counter, so it will have nanosecond
        resolution.
    """

[[apis]]
    filename = "sleep"
    kinds = ["fn"]
    args = ["secs flo"]
    returns = "nil"
    text = """
        Sleeps the current thread for the given number of seconds.

        The duration of thread sleeps tends to be very imprecise, especially on Windows. You 
        should prefer to time your frames using a different signal, such as blocking on a swap 
        chain with vsync enabled.
    """

[[apis]]
    filename = "unix-time"
    kinds = ["fn"]
    args = []
    returns = "str"
    text = """
        Returns the number of seconds elapsed since the UNIX epoch, as a string.

        There is currently no built-in way to convert this timestamp into a human-readable 
        date-and-time format. This function is only intended to be used for logging.
    """

[[apis]]
    filename = "gc"
    starts-subcategory = "Garbage Collection"
    kinds = ["fn"]
    args = []
    returns = "nil"
    text = """
        Runs the garbage collector.

        The amount of work done by this call is proportional to the amount of memory allocated
        (in bytes) since the last time `gc` was called. It's designed to be called once per
        frame, e.g. sixty times per second.
    """

[[apis]]
    filename = "gc-value"
    kinds = ["fn"]
    args = ["name sym"]
    returns = "val"
    see-also = ["set-gc-value"]
    text = """
        Retrieves information about the garbage collector.

        `name` must be one of the following symbols:

        - `ratio` returns the garbage collector's current [ratio](set-gc-value) as a
          floating-point number.
        - `min-ratio` and `default-ratio` return the minimum and default values for `ratio`,
          as a floating-point number.
        - `young-bytes`, `old-bytes` and `ghost-bytes` returns the number of bytes in each of
          the garbage collector's generations, as an integer.
    """

[[apis]]
    filename = "set-gc-value"
    name = "gc-value="
    kinds = ["fn"]
    args = ["name sym", "new-val val"]
    returns = "nil"
    text = """
        Tunes the garbage collector.

        `name` must be the symbol `ratio`, and `new-val` must be a floating point number
        which is greater than or equal to `(gc-value min-ratio)`.

        This tunes the ratio of long-lived data to garbage data on the garbage-collected 
        heap. Lower ratios will lead to proportionally smaller amounts of garbage, but they 
        require the collector to do exponentially more work in order to keep up.
    """
